#!/usr/bin/env Rscript
rm(list=ls())
suppressPackageStartupMessages(library(edgeR))
suppressPackageStartupMessages(library(optparse))

# Parse parameters
parser <- OptionParser()
parser <- add_option(parser, c("--lib"), action="store", default=NA, type='character',
                     help="library csv matrix")
parser <- add_option(parser, c("--bsj"), action="store", default=NA, type='character',
                     help="bsj csv matrix")
parser <- add_option(parser, c("--circ"), action="store", default=NA, type='character',
                     help="circ info matri")
parser <- add_option(parser, c("--gene"), action="store", default=NA, type='character',
                     help="gene count matrix")
parser <- add_option(parser, c("--ratio"), action="store", default=NA, type='character',
                     help="junction ratio matrix")
opt <- parse_args(parser, args = c("--lib=test_lib_modified.csv", "--bsj=circ_bsj.csv", "--gene=gene_count_matrix.csv"))

# main point of program is here, do this whether or not "verbose" is set
if (is.na(opt$lib) || is.na(opt$bsj) || is.na(opt$gene)) {
    cat("Please specify --lib/--bsj/--circ/--gene/--ratio, refer to the manual for detailed instruction!\n",
        file=stderr())
}

# Load data
lib_mtx <- read.csv(opt$lib, row.names = 1)
gene_mtx <- read.csv(opt$gene, row.names = 1)
bsj_mtx <- read.csv(opt$bsj, row.names = 1)

gene_DGE <- DGEList(counts = gene_mtx, group = lib_mtx$Group)
gene_idx <- filterByExpr(gene_DGE)
gene_DGE <- gene_DGE[gene_idx, , keep.lib.sizes=FALSE]
gene_DGE <- calcNormFactors(gene_DGE)

design <- model.matrix(~factor(lib_mtx$Group))
gene_DGE <- estimateDisp(gene_DGE, design, robust = TRUE)
gene_fit <- glmFit(gene_DGE, design)
gene_lrt <- glmLRT(gene_fit)

gene_df <- gene_lrt$table
gene_order <- order(gene_lrt$table$PValue)
gene_df$DE <- decideTestsDGE(gene_lrt)
gene_df <- gene_df[gene_order, ]
gene_df$FDR <- p.adjust(gene_df$PValue, method="fdr")
write.csv(gene_df, file='./gene_DE.csv', quote = FALSE)

## circRNA
circ_DGE <- DGEList(counts = bsj_mtx,
                    group = lib_mtx$Group,
                    lib.size = gene_DGE$samples[, "lib.size"],
                    norm.factors = gene_DGE$samples[, "norm.factors"])
circ_idx <- filterByExpr(circ_DGE)
circ_DGE <- circ_DGE[circ_idx, , keep.lib.sizes=TRUE]

circ_DGE <- estimateDisp(circ_DGE, design, robust = TRUE)
circ_fit <- glmFit(circ_DGE, design)
circ_lrt <- glmLRT(circ_fit)

circ_df <- circ_lrt$table
circ_order <- order(circ_lrt$table$PValue)
circ_df$DE <- decideTestsDGE(circ_lrt)
circ_df <- circ_df[circ_order, ]
circ_df$FDR <- p.adjust(circ_df$PValue, method="fdr")
write.csv(circ_df, file='./circ_DE.csv', quote = FALSE)
